@model dynamic
@{
    ViewBag.Title = "New Rental Form";
}

<h2>New Rental Form</h2>
<form id="newRent">
    <div class="form-group">
        <label>Customer</label>
        <div class="tt-container">
            <input id="customer" data-rule-validCustomer="true" required name="customer" type="text" value="" class="form-control" />
        </div>

    </div>
    <div class="form-group">
        <label>Movie</label>
        <div class="tt-container">
            <input id="movie" data-rule-validMovie="true" name="movie" type="text" value="" class="form-control" />

        </div>
    </div>
    <div class="row">
        <div class="col-md-3 col-sm-3">
            <ul id="movies" class="list-group"></ul>
        </div>
        
    </div>

    <button class="btn btn-primary">Submit</button>
</form>

@section scripts
{
    @*For client side validation*@
    @Scripts.Render("~/bundles/jqueryval")
    
    <script>
        $(document).ready(function() {

            var vm = {
                @*creating the emppty arrays of movies to contain all the movies*@
                movieIds: []
            };

            @*using typeahead javascript for displaying the name.*@
            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#customer').typeahead({
                minLength: 2,
                highlight: true
            }, {
                name: 'customers',
                display: 'name',
                source: customers
            }).on("typeahead:select", function(e, customer) {
                vm.customerId = customer.id;
            });

            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#movie').typeahead({
                minLength: 3,
                highlight: true
            }, {
                name: 'movies',
                display: 'name',
                source: movies
            }).on("typeahead:select", function(e, movie) {
                $("#movies").append("<li class='list-group-item'>" + movie.name + "</li>");
                $("#movie").typeahead("val", "");
                vm.movieIds.push(movie.id);
            });

            $.validator.addMethod("validCustomer", function() {
                return vm.customerId && vm.customerId !== 0;
            }, "Please select a valid Customer");

            $.validator.addMethod("validMovie", function () {
                return vm.movieIds.length>0;
            }, "Please select a valid Movie");

            @*Performing client-side validation*@
            var validator= $("#newRent").validate({

                 @*Submitting the form to database*@
            @*Form id*@
                submitHandler:function() {
                   @*prevent the form in submitting in normal manner, like traditional html form*@
                //e.preventDefault();

                @*using ajax based call function*@
                $.ajax({ 
                    @*specify the data to be transfered *@
                    url: "/api/newRental",
                    method: "post",
                    data: vm
                })
                    .done(function () {
                        toastr.success("Rentals successfully recorded.");

                        $("#customer").typeahead("val", "");
                        $("#movie").typeahead("val", "");
                        $("#movie").empty();

                        vm = { movieIds: [] };

                        validator.resetForm();

                    })
                    .fail(function() {
                        toastr.error("Please try again!");

                    });
                    return false;
                }
            });
           
            });
    </script>
}
